{"path":"sem5/AI/pdf/GeneticAlgorithmPracticeProblem_v3.pdf","text":"Q1. Explain each step of the genetic algorithm using the Traveling Salesman Problem (TSP) as the application scenario. Clearly describe population initialization, fitness evaluation, selection, crossover, and mutation using appropriate terminology. Illustrate your explanation with an example involving at least five cities and provide step-by-step calculations wherever applicable.\" Q2. Consider the function of maximizing the function ùëì(ùë•) = ùë•2, where x is permitted to vary between 0 to 31 using Genetic Algorithm. Q3. Maximize the value of the function ùëì(ùë•) = ‚àíùë•^2 + 2ùë• over the range of real number from 0 to 2 with initial population 11010, 00111, 10110, 00101, with random number 0.4, 0.15, 0.7, 0.9. Select the crossover between the first and fifth digits? Q4. Solve a problem ùëì(ùë•) = ùë•3, where 0 ‚â§ ùë• ‚â§ 15. Find some stages of application of genetic algorithms. Q5. Suppose a genetic algorithm uses chromosomes of the form ùë• = ùëéùëèùëêùëëùëíùëìùëî‚Ñé with a fixed length of eight genes. Each gene can be any digit between 0 and 9. Let the fitness of individual ùë• be calculated as: ùëì(ùë•) = (ùëé + ùëè) ‚àí (ùëê + ùëë) + (ùëí + ùëì) ‚àí (ùëî + ‚Ñé) and let the initial population consist of four individuals with the following chromosomes: ùíôùüè = ùüî ùüì ùüí ùüè ùüë ùüì ùüë ùüê , ùíôùüê = ùüñ ùüï ùüè ùüê ùüî ùüî ùüé ùüè ùíôùüë = ùüê ùüë ùüó ùüê ùüè ùüê ùüñ ùüì , ùíôùüí = ùüí ùüè ùüñ ùüì ùüê ùüé ùüó 4 Evaluate each individual's fitness, showing all your workings and arrange them in order with the fittest first and the least fit last. Q1. Answer: Genetic Algorithm (GA) is a heuristic search technique inspired by Charles Darwin‚Äôs theory of natural evolution. It is widely used to solve optimization and search problems. When applied to the Traveling Salesman Problem (TSP), the GA attempts to find the shortest possible route that visits each city exactly once and returns to the starting city. Steps to solve TSP using Genetic Algorithm: i. Define Encoding Mechanism (Chromosome Representation) ‚Ä¢ In TSP, an individual (chromosome) is a possible tour (i.e., an ordered list of cities). ‚Ä¢ For example, for 5 cities A, B, C, D, E, one possible chromosome is: ‚Ä¢ Chromosome = [A, C, E, D, B] ii. Define Fitness Function ‚Ä¢ The goal is to minimize the total tour length. ‚Ä¢ Fitness function: ‚Ä¢ Fitness‚Äà = ‚Äà 1 Total‚Äàdistance‚Äàof the Tour ‚Äà ‚Ä¢ This ensures shorter routes have higher fitness values. iii. Initialize a Population (Assume population size = 4) Let the distances (in km) between cities be defined by the following symmetric matrix: A B C D E A 0 10 15 20 25 B 10 0 35 25 30 C 15 35 0 30 20 D 20 25 30 0 15 E 25 30 20 15 0 Initial population: Parent Chromosome Route Parent Chromosome Route P1 A ‚Üí B ‚Üí C ‚Üí D ‚Üí E ‚Üí A P3 A ‚Üí D ‚Üí C ‚Üí B ‚Üí E ‚Üí A P2 A ‚Üí C ‚Üí E ‚Üí B ‚Üí D ‚Üí A P4 A ‚Üí E ‚Üí D ‚Üí C ‚Üí B ‚Üí A iv. Calculate the Fitness of all individuals Compute the tour length and fitness: ‚Ä¢ P1: A-B-C-D-E-A = 10+35+30+15+25 = 115, Fitness = 1/115 ‚âà 0.0087 ‚Ä¢ P2: A-C-E-B-D-A = 15+20+30+25+20 = 110, Fitness = 1/110 ‚âà 0.0091 ‚Ä¢ P3: A-D-C-B-E-A = 20+30+35+30+25 = 140, Fitness = 1/140 ‚âà 0.0071 ‚Ä¢ P4: A-E-D-C-B-A = 25+15+30+35+10 = 115, Fitness = 1/115 ‚âà 0.0087 v. Selection of Parents ‚Ä¢ Use roulette wheel selection based on fitness. ‚Ä¢ Assign probabilities: o P1: 0.0087 / total ‚âà 0.22 o P2: 0.0091 / total ‚âà 0.23 o P3: 0.0071 / total ‚âà 0.18 o P4: 0.0087 / total ‚âà 0.22 Select P2 and P4 for crossover (based on higher fitness). vi. Crossover ‚Ä¢ Use Order Crossover (OX) for permutation-based chromosomes. ‚Ä¢ Example: o Parent 1: A-C-E-B-D o Parent 2: A-E-D-C-B o Crossover between position 3 to 4: ‚ñ™ Segment from P1: E-B ‚ñ™ Fill remaining from P2 preserving order: A-D-C ‚ñ™ Resultant child C1: [_, _, E, B, _] => [A, D, E, B, C] C2: [ _ , _ , D, C, _ ] = > [ A, E, D, C, B] vii. Mutation ‚Ä¢ Apply swap mutation to introduce diversity. ‚Ä¢ E.g., swap position 2 and 4: o Before C1: [A, D, E, B, C] o After: C3 [A, B, E, D, C] viii. Stopping Criteria ‚Ä¢ Continue repeating steps iv to vii until: o A solution with minimum tour distance is found, o or max generations reached, o or improvement plateaus. Conclusion: Using GA on TSP helps approximate near-optimal routes efficiently. The solution evolves generation-by-generation through selection, crossover, and mutation ‚Äî mimicking natural evolution to solve combinatorial optimization problems. Q1 More explaining about stopping conditions Common Stopping Criteria for GA in TSP: 1. Maximum Number of Generations ‚Ä¢ Stop after a fixed number of generations (e.g., 500, 1000). ‚Ä¢ Simple and ensures time-bounded execution. ‚Ä¢ Might stop too early or run unnecessarily long. 2. No Improvement in Best Fitness ‚Ä¢ Monitor the best route length over time. ‚Ä¢ ‚è∏ Stop if no improvement occurs for N generations. ‚Ä¢ Example: \"If best distance hasn‚Äôt changed for 100 generations, stop.\" ‚Ä¢ Efficient and adaptive. ‚Ä¢ Might stop prematurely due to local optima. 3. Target Fitness Reached ‚Ä¢ Stop when a route below a desired length is found. ‚Ä¢ Example: If optimal/near-optimal TSP length is known, set a threshold. ‚Ä¢ Works well if you know the benchmark. ‚Ä¢ Not always feasible; real-world TSP solutions may not have a known best. 4. Time Limit ‚Ä¢ ‚è≤ Stop after a fixed amount of computation time. ‚Ä¢ Useful in real-time or time-constrained systems. ‚Ä¢ Doesn‚Äôt guarantee best possible solution. 5. Diversity Threshold ‚Ä¢ Measure how similar the population has become. ‚Ä¢ Stop when most individuals in the population are too similar. ‚Ä¢ Indicates convergence (or stagnation). ‚Ä¢ Can be computationally expensive to track. 6. Combination of Criteria (Recommended) ‚Ä¢ Use multiple conditions for better control: Stop if: - Max generations reached, OR - No improvement in best fitness for 100 generations, OR - Time limit exceeded Best Practice for TSP: ‚Ä¢ TSP is a hard NP-Hard problem. ‚Ä¢ It‚Äôs better to balance exploration and exploitation, so using: \"No improvement in N generations\" + \"Max generations\" is usually the most effective combo.","libVersion":"0.5.0","langs":""}