{"path":"sem5/CD/SYL_CD_L.pdf","text":"BCSE307P Compiler Design Lab L T P C 0 0 2 1 Pre-requisite Syllabus version 1.0 Course Objectives 1. To provide fundamental knowledge of various language translators. 2. To make students familiar with phases of compiler. 3. To provide foundation for study of high-performance compiler design. Course Outcome 1. Apply the skills on devising, selecting and using tools and techniques towards compiler design 2. Develop language specifications using context free grammars (CFG). 3. Apply the ideas, the techniques, and the knowledge acquired for the purpose of developing software systems. 4. Constructing symbol tables and generating intermediate code. 5. Obtain insights on compiler optimization and code generation. Indicative Experiments 1. Implementation of LEXR using LLVM. 2. Implementation of handwritten parser using LLVM 3. Generating code with the LLVM backend. 4. Defining a real programming language. 5. Write a recursive descent parser for the CFG language and implement it using LLVM. 6. Write a LR parser for the CFG language and implement it in the using LLVM. 7. Intro to Flex and Bison Modify the scanner and parser so that terminating a statement with \"; b\" instead of \";\" results in the output being printed in binary. 8. Using LLVM-style RTTI for the AST and Generating IR from the AST. 9. Converting types from an AST description to LLVM types. 10. Emitting assembler text and object code. Total Laboratory Hours 30 hours Mode of assessment: CAT, FAT Text Book(s) 1 Learn LLVM 12: A beginner's guide to learning LLVM compiler tools and core libraries with C++ Reference Books 1. Watson, Des. A Practical Approach to Compiler Construction. Germany, Springer International Publishing, 2017. Recommended by Board of Studies 04-03-2022 Approved by Academic Council No. 65 Date 17-03-2022 Agenda Item 65/39 - Annexure - 35 Proceedings of the 65th Academic Council (17.03.2022) 998","libVersion":"0.5.0","langs":""}