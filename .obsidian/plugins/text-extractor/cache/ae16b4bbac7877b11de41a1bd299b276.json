{"path":"sem5/CN/pdf/Module-1_Functionalities of OS.pdf","text":"Functionalities of operating System Process Management • A process is a program in execution. It is a unit of work within the system. Program is a passive entity, process is an active entity. • Process needs resources to accomplish its task – CPU, memory, I/O, files – Initialization data • Process termination requires reclaim of any reusable resources • Single-threaded process has one program counter specifying location of next instruction to execute – Process executes instructions sequentially, one at a time, until completion • Multi-threaded process has one program counter per thread • Typically system has many processes, some user, some operating system running concurrently on one or more CPUs – Concurrency by multiplexing the CPUs among the processes / threads Process Management Activities • Creating and deleting both user and system processes • Suspending and resuming processes • Providing mechanisms for process synchronization • Providing mechanisms for process communication • Providing mechanisms for deadlock handling The operating system is responsible for the following activities in connection with process management: Memory Management • To execute a program all (or part) of the instructions must be in memory • All (or part) of the data that is needed by the program must be in memory. • Memory management determines what is in memory and when – Optimizing CPU utilization and computer response to users • Memory management activities – Keeping track of which parts of memory are currently being used and by whom – Deciding which processes (or parts thereof) and data to move into and out of memory – Allocating and deallocating memory space as needed Storage Management • OS provides uniform, logical view of information storage – Abstracts physical properties to logical storage unit - file – Each medium is controlled by device (i.e., disk drive, tape drive) • Varying properties include access speed, capacity, data- transfer rate, access method (sequential or random) • File-System management – Files usually organized into directories – Access control on most systems to determine who can access what – OS activities include • Creating and deleting files and directories • Primitives to manipulate files and directories • Mapping files onto secondary storage • Backup files onto stable (non-volatile) storage media Mass-Storage Management • Usually disks used to store data that does not fit in main memory or data that must be kept for a “long” period of time • Proper management is of central importance • Entire speed of computer operation hinges on disk subsystem and its algorithms • OS activities – Free-space management – Storage allocation – Disk scheduling • Some storage need not be fast – Tertiary storage includes optical storage, magnetic tape – Still must be managed – by OS or applications – Varies between WORM (write-once, read-many-times) and RW (read-write) Performance of Various Levels of Storage Movement between levels of storage hierarchy can be explicit or implicit Migration of data “A” from Disk to Register • Multitasking environments must be careful to use most recent value, no matter where it is stored in the storage hierarchy • Multiprocessor environment must provide cache coherency in hardware such that all CPUs have the most recent value in their cache • Distributed environment situation even more complex – Several copies of a datum can exist I/O Subsystem • One purpose of OS is to hide peculiarities of hardware devices from the user • I/O subsystem responsible for – Memory management of I/O including buffering (storing data temporarily while it is being transferred), caching (storing parts of data in faster storage for performance), spooling -Simultaneous Peripheral Operations On-Line (the overlapping of output of one job with input of other jobs) – General device-driver interface – Drivers for specific hardware devices Protection and Security • Protection – any mechanism for controlling access of processes or users to resources defined by the OS • Security – defense of the system against internal and external attacks – Huge range, including denial-of-service, worms, viruses, identity theft, theft of service • Systems generally first distinguish among users, to determine who can do what – User identities (user IDs, security IDs) include name and associated number, one per user – User ID then associated with all files, processes of that user to determine access control – Group identifier (group ID) allows set of users to be defined and controls managed, then also associated with each process, file – Privilege escalation allows user to change to effective ID with more rights Kernel Data Structures  Many similar to standard programming data structures  Singly linked list  Doubly linked list  Circular linked list Kernel Data Structures • Binary search tree left <= right – Search performance is O(n) – Balanced binary search tree is O(lg n) Kernel Data Structures • Hash function can create a hash map • Bitmap – string of n binary digits representing the status of n items • Linux data structures defined in include files <linux/list.h>, <linux/kfifo.h>, <linux/rbtree.h> Computing Environments - Traditional • Stand-alone general purpose machines • But blurred as most systems interconnect with others (i.e., the Internet) • Portals provide web access to internal systems • Network computers (thin clients) are like Web terminals • Mobile computers interconnect via wireless networks • Networking becoming ubiquitous – even home systems use firewalls to protect home computers from Internet attacks Computing Environments - Mobile • Handheld smartphones, tablets, etc • What is the functional difference between them and a “traditional” laptop? • Extra feature – more OS features (GPS, gyroscope) • Allows new types of apps like augmented reality • Use IEEE 802.11 wireless, or cellular data networks for connectivity • Leaders are Apple iOS and Google Android Computing Environments – Distributed • Distributed computiing – Collection of separate, possibly heterogeneous, systems networked together • Network is a communications path, TCP/IP most common – Local Area Network (LAN) – Wide Area Network (WAN) – Metropolitan Area Network (MAN) – Personal Area Network (PAN) – Network Operating System provides features between systems across network • Communication scheme allows systems to exchange messages • Illusion of a single system Computing Environments – Client-Server  Client-Server Computing  Dumb terminals supplanted by smart PCs  Many systems now servers, responding to requests generated by clients  Compute-server system provides an interface to client to request services (i.e., database)  File-server system provides interface for clients to store and retrieve files Computing Environments - Peer-to-Peer • Another model of distributed system • P2P does not distinguish clients and servers – Instead all nodes are considered peers – May each act as client, server or both – Node must join P2P network • Registers its service with central lookup service on network, or • Broadcast request for service and respond to requests for service via discovery protocol – Examples include Napster and Gnutella, Voice over IP (VoIP) such as Skype Computing Environments - Virtualization • Allows operating systems to run applications within other OSes – Vast and growing industry • Emulation used when source CPU type different from target type (i.e. PowerPC to Intel x86) – Generally slowest method – When computer language not compiled to native code – Interpretation • Virtualization – OS natively compiled for CPU, running guest OSes also natively compiled – Consider VMware running WinXP guests, each running applications, all on native WinXP host OS – VMM (virtual machine Manager) provides virtualization services Computing Environments - Virtualization • Use cases involve laptops and desktops running multiple OSes for exploration or compatibility – Apple laptop running Mac OS X host, Windows as a guest – Developing apps for multiple OSes without having multiple systems – QA testing applications without having multiple systems – Executing and managing compute environments within data centers • VMM can run natively, in which case they are also the host – There is no general purpose host then (VMware ESX and Citrix XenServer) Computing Environments - VirtualizationComputing Environments – Cloud Computing • Delivers computing, storage, even apps as a service across a network • Logical extension of virtualization because it uses virtualization as the base for it functionality. – Amazon EC2 has thousands of servers, millions of virtual machines, petabytes of storage available across the Internet, pay based on usage • Many types – Public cloud – available via Internet to anyone willing to pay – Private cloud – run by a company for the company’s own use – Hybrid cloud – includes both public and private cloud components – Software as a Service (SaaS) – one or more applications available via the Internet (i.e., word processor) – Platform as a Service (PaaS) – software stack ready for application use via the Internet (i.e., a database server) – Infrastructure as a Service (IaaS) – servers or storage available over Internet (i.e., storage available for backup use) Computing Environments – Cloud Computing • Cloud computing environments composed of traditional OSes, plus VMMs, plus cloud management tools – Internet connectivity requires security like firewalls – Load balancers spread traffic across multiple applications Computing Environments – Real-Time Embedded Systems • Real-time embedded systems most prevalent form of computers – Vary considerable, special purpose, limited purpose OS, real-time OS – Use expanding • Many other special computing environments as well – Some have OSes, some perform tasks without an OS • Real-time OS has well-defined fixed time constraints – Processing must be done within constraint – Correct operation only if constraints met Open-Source Operating Systems • Operating systems made available in source-code format rather than just binary closed-source • Counter to the copy protection and Digital Rights Management (DRM) movement • Started by Free Software Foundation (FSF), which has “copyleft” GNU Public License (GPL) • Examples include GNU/Linux and BSD UNIX (including core of Mac OS X), and many more • Can use VMM like VMware Player (Free on Windows), Virtualbox (open source and free on many platforms - http://www.virtualbox.com) – Use to run guest operating systems for exploration Silberschatz, Galvin and Gagne ©2013Operating System Concepts – 9 th Edit9on THANK YOU","libVersion":"0.5.0","langs":""}