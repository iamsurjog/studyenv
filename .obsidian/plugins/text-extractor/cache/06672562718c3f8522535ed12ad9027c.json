{"path":"sem5/OS/pdf/Module-2_System calls.pdf","text":"MODULE 2 System Calls System Calls • Programming interface to the services provided by the OS • Typically written in a high-level language (C or C++) • Mostly accessed by programs via a high-level Application Program Interface (API) rather than direct system call use • Three most common APIs are Win32 API for Windows, POSIX API for POSIX-based systems (including virtually all versions of UNIX, Linux, and Mac OS X), and Java API for the Java virtual machine (JVM) • Why use APIs rather than system calls? (Note that the system-call names used throughout this text are generic) Example of System Calls • System call sequence to copy the contents of one file to another file Example of Standard API • Consider the ReadFile() function in the • Win32 API—a function for reading from a file • A description of the parameters passed to ReadFile() – HANDLE file—the file to be read – LPVOID buffer—a buffer where the data will be read into and written from – DWORD bytesToRead—the number of bytes to be read into the buffer – LPDWORD bytesRead—the number of bytes read during the last read – LPOVERLAPPED ovl—indicates if overlapped I/O is being used System Call Implementation • Typically, a number associated with each system call – System-call interface maintains a table indexed according to these numbers • The system call interface invokes intended system call in OS kernel and returns status of the system call and any return values • The caller need know nothing about how the system call is implemented – Just needs to obey API and understand what OS will do as a result call – Most details of OS interface hidden from programmer by API • Managed by run-time support library (set of functions built into libraries included with compiler) API – System Call – OS RelationshipStandard C Library Example • C program invoking printf() library call, which calls write() system call System Call Parameter Passing • Often, more information is required than simply identity of desired system call – Exact type and amount of information vary according to OS and call • Three general methods used to pass parameters to the OS – Simplest: pass the parameters in registers • In some cases, may be more parameters than registers – Parameters stored in a block, or table, in memory, and address of block passed as a parameter in a register • This approach taken by Linux and Solaris – Parameters placed, or pushed, onto the stack by the program and popped off the stack by the operating system – Block and stack methods do not limit the number or length of parameters being passed Parameter Passing via TableTypes of System Calls • Process control – end, abort – load, execute – create process, terminate process – get process attributes, set process attributes – wait for time – wait event, signal event – allocate and free memory • File management – create file, delete file – open, close file – read, write, reposition – get and set file attributes Types of System Calls (Cont.) • Device management – request device, release device – read, write, reposition – get device attributes, set device attributes – logically attach or detach devices • Information maintenance – get time or date, set time or date – get system data, set system data – get and set process, file, or device attributes • Communications – create, delete communication connection – send, receive messages – transfer status information – attach and detach remote devices Examples of Windows and Unix System CallsExample: MS-DOS • Single-tasking • Shell invoked when system booted • Simple method to run program – No process created • Single memory space • Loads program into memory, overwriting all but the kernel • Program exit -> shell reloaded MS-DOS execution (a) At system startup (b) running a program Example: FreeBSD • Unix variant • Multitasking • User login -> invoke user’s choice of shell • Shell executes fork() system call to create process – Executes exec() to load program into process – Shell waits for process to terminate or continues with user commands • Process exits with code of 0 – no error or > 0 – error code FreeBSD Running Multiple Programs","libVersion":"0.5.0","langs":""}