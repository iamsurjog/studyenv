{"path":"sem5/DBMS/pdfs/Closure to find the keys.pdf","text":"Candidate Key? A candidate key is a minimal set of attributes that can uniquely identify all other attributes in a relation. You need to consider all combinations of attributes, not just those on the left-hand side of the FDs, because:  The candidate key may not appear directly on the left side of any FD.  What matters is whether the closure of a set of attributes gives all attributes in the relation. Why? Functional dependencies tell us how attributes depend on each other — but candidate keys are sets of attributes from which you can determine the entire relation. 1: List all attributes in the relation Example: R(A, B, C, D, E) 2: Identify all attributes that are dependent These appear only on the → right-hand side of FDs and never on the left-hand side. These are non-key attributes — they can be determined by others, so they are not essential to uniquely identify tuples. 3: Identify possible starting points (attributes not determined by others) Attributes that do not appear on the right-hand side of any FD are likely part of the candidate key, because they are not derived from anything else. 4: Try combinations of attributes using attribute closure For each set of attributes:  Compute its closure (X⁺)  If X⁺ = all attributes in R → X is a superkey  If X is minimal (no attribute can be removed) → X is a candidate key Problem 1 Given Relation: R(A, B, C, D, E) Given Functional Dependencies (FDs): 1. A B→ 2. B C→ 3. CD E→ 4. E A→ Find all candidate keys of the relation R using attribute closure. Attribute Closure To find a candidate key, we pick a set of attributes and compute its closure. The closure of X, denoted X⁺, is the set of all attributes functionally determined by X using the FDs. If X⁺ = all attributes in R, then X is a superkey. If X is also minimal, it's a candidate key. Let’s try attribute closures of different combinations. A⁺ A B→ B C→ E A→ CD E→ Now compute A⁺: 1. A B → ⇒ add B 2. B C → ⇒ add C 3. (A, B, C) now, but not D or E So → A⁺ = {A, B, C} Not all attributes → Not a superkey Compute B⁺ Start with: B⁺ = {B} Use FDs:  B C → ⇒ Add C Now: B⁺ = {B, C} No more FDs apply. B⁺ = {B, C} Not a superkey→ Compute E⁺ Start with: E⁺ = {E} Use FDs:  E A → ⇒ Add A  A B → ⇒ Add B  B C → ⇒ Add C Now: E⁺ = {E, A, B, C} Still missing D So: E⁺ = {E, A, B, C} Not a superkey→ Try CD⁺ 1. CD E → ⇒ add E 2. E A → ⇒ add A 3. A B → ⇒ add B 4. B C → ⇒ C already there Now we have: CD⁺ = {C, D, E, A, B} = All attributes ⇒ Superkey Is it minimal? Let’s test removing one attribute:  Try C alone: o C nothing → ⇒ C⁺ = {C}  Try D alone: o D nothing → ⇒ D⁺ = {D} So CD is minimal ⇒ Candidate Key Candidate Key(s): CD  elation: R(P, Q, R, S, T)  Functional Dependencies (FDs):  1. P Q→  2. Q R→  3. PR S→  4. S T→ Problem 2 The relation has these 5 attributes: {P, Q, R, S, T} We need to find a minimal set of attribute(s) that can determine all 5 attributes using the given FDs. Try attribute closure of P Compute P⁺ (closure of {P}): P⁺ = {P} Now apply FDs:  P Q→ ⇒ add Q → {P, Q}  Q R→ ⇒ add R → {P, Q, R}  PR S→ : P and R are present ⇒ add S → {P, Q, R, S}  S T→ ⇒ add T → {P, Q, R, S, T} So: P⁺ = {P, Q, R, S, T} all attributes This → means P is a superkey. Now check if it’s minimal:  P is a single attribute can’t remove anything.→ P is a candidate key Check for other candidate keys Let’s test other combinations to be sure there’s no second candidate key. Try Q⁺ Start: {Q}  Q R→ ⇒ add R → {Q, R}  No further FDs apply Q⁺ =9 all attributes Try S⁺ Start: {S}  S T→ ⇒ {S, T} No other FDs apply→ S⁺ =9 all attributes Try R⁺ or T⁺  R⁺ = {R}  T⁺ = {T} No FDs begin with R or T no useful closure→ Not superkeys Try PR⁺ Start: {P, R}  P Q→ ⇒ add Q → {P, R, Q}  PR S→ ⇒ add S → {P, R, Q, S}  Q R→ (R already present)  S T→ ⇒ add T → {P, R, Q, S, T} PR⁺ = all attributes But P alone is already a candidate key So PR is not minimal , it is a super key. Not a candidate key ________________________________________________________________________ _____________ Problem 3 Relation: R(A, B, C, D, E, F) Functional Dependencies (FDs): 1. A B→ 2. B C→ 3. CD E→ 4. E F→ 5. F A→ Find all candidate keys for the relation R(A, B, C, D, E, F) using the attribute closure method. 1: List all attributes R={A,B,C,D,E,F}R = \\{A, B, C, D, E, F\\}R={A,B,C,D,E,F} Step 2: Identify dependent attributes (attributes appearing only on RHS)  RHS attributes: o B (in 1) o C (in 2) o E (in 3) o F (in 4) o A (in 5) o Attributes never appearing on RHS: D Dependent attributes={A,B,C,E,F},Independent attribute={D} 3: Attributes not on RHS must be part of every candidate key  So every candidate key contains D. Step 4: Find minimal sets containing D whose closure covers all attributes We test combinations with D Step 1 – Problem Setup Let relation R(A, B, C, D, E) have the following Functional Dependencies (FDs): 1. A B→ 2. B C→ 3. A D→ 4. D E→ Step 2 – Find Candidate Key Using Attribute Closure Step 2.1 – Start with possible key attributes We check which attributes can determine all others. Closure of {A}:  Start: {A}  Apply FD1 (A B): add {B} → ⇒ {A, B}  Apply FD2 (B C): add {C} → ⇒ {A, B, C}  Apply FD3 (A D): add {D} → ⇒ {A, B, C, D}  Apply FD4 (D E): add {E} → ⇒ {A, B, C, D, E} {A}+ = {A, B, C, D, E} (all attributes) ⇒ A is a Candidate Key Closure of {B}:  Start: {B}  Apply FD2 (B C): add {C} → ⇒ {B, C} Missing A, D, E ⇒ Not a key. Closure of {D}:  Start: {D}  Apply FD4: add {E} ⇒ {D, E} Missing A, B, C ⇒ Not a key. Result:  Only Candidate Key: {A}  Primary Key: {A} Problem 5: Relation: R(W,X,Y,Z) Functional Dependencies (FDs): 1. W XW→ 2. X YX \\to YX Y→ → 3. WY ZWY \\to ZWY Z→ → 4. Z WZ \\to WZ W→ → Step 1: List all attributes R={W,X,Y,Z} Step 2: Identify dependent attributes (appear only on RHS)  RHS attributes: o XXX (in 1) o YYY (in 2) o ZZZ (in 3) o WWW (in 4)  Check which attribute(s) never appear on RHS: All attributes appear on RHS at least once, so no attribute is independent in this case. 3: Identify possible candidate keys (since no attribute is independent, try combinations) Since no attribute is excluded from RHS, candidate keys may be single attributes or combinations. 4: Compute closures of attribute sets","libVersion":"0.5.0","langs":""}